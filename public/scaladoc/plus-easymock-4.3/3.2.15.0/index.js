Index.PACKAGES = {"org" : [], "org.scalatestplus" : [], "org.scalatestplus.easymock" : [{"name" : "org.scalatestplus.easymock.EasyMockSugar", "object" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html", "members_object" : [{"label" : "MockObjects", "tail" : "", "member" : "org.scalatestplus.easymock.EasyMockSugar.MockObjects", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#MockObjectsextendsProductwithSerializable", "kind" : "case class"}, {"label" : "whenExecuting", "tail" : "(fun: => Unit)(mocks: MockObjects): Unit", "member" : "org.scalatestplus.easymock.EasyMockSugar.whenExecuting", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#whenExecuting(fun:=>Unit)(implicitmocks:EasyMockSugar.this.MockObjects):Unit", "kind" : "def"}, {"label" : "whenExecuting", "tail" : "(mocks: AnyRef*)(fun: => Unit): Unit", "member" : "org.scalatestplus.easymock.EasyMockSugar.whenExecuting", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#whenExecuting(mocks:AnyRef*)(fun:=>Unit):Unit", "kind" : "def"}, {"label" : "expecting", "tail" : "(unused: Any): Unit", "member" : "org.scalatestplus.easymock.EasyMockSugar.expecting", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#expecting(unused:Any):Unit", "kind" : "def"}, {"label" : "niceMock", "tail" : "(classTag: ClassTag[T]): T", "member" : "org.scalatestplus.easymock.EasyMockSugar.niceMock", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#niceMock[T<:AnyRef](implicitclassTag:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "strictMock", "tail" : "(classTag: ClassTag[T]): T", "member" : "org.scalatestplus.easymock.EasyMockSugar.strictMock", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#strictMock[T<:AnyRef](implicitclassTag:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "mock", "tail" : "(classTag: ClassTag[T]): T", "member" : "org.scalatestplus.easymock.EasyMockSugar.mock", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#mock[T<:AnyRef](implicitclassTag:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "lastCall", "tail" : "(): IExpectationSetters[T]", "member" : "org.scalatestplus.easymock.EasyMockSugar.lastCall", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#lastCall[T]:org.easymock.IExpectationSetters[T]", "kind" : "def"}, {"label" : "call", "tail" : "(value: T): IExpectationSetters[T]", "member" : "org.scalatestplus.easymock.EasyMockSugar.call", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#call[T](value:T):org.easymock.IExpectationSetters[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/scalatestplus\/easymock\/EasyMockSugar.html", "kind" : "trait", "members_trait" : [{"label" : "whenExecuting", "tail" : "(fun: => Unit)(mocks: MockObjects): Unit", "member" : "org.scalatestplus.easymock.EasyMockSugar.whenExecuting", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#whenExecuting(fun:=>Unit)(implicitmocks:EasyMockSugar.this.MockObjects):Unit", "kind" : "def"}, {"label" : "MockObjects", "tail" : "", "member" : "org.scalatestplus.easymock.EasyMockSugar.MockObjects", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#MockObjectsextendsProductwithSerializable", "kind" : "case class"}, {"label" : "whenExecuting", "tail" : "(mocks: AnyRef*)(fun: => Unit): Unit", "member" : "org.scalatestplus.easymock.EasyMockSugar.whenExecuting", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#whenExecuting(mocks:AnyRef*)(fun:=>Unit):Unit", "kind" : "def"}, {"label" : "expecting", "tail" : "(unused: Any): Unit", "member" : "org.scalatestplus.easymock.EasyMockSugar.expecting", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#expecting(unused:Any):Unit", "kind" : "def"}, {"label" : "niceMock", "tail" : "(classTag: ClassTag[T]): T", "member" : "org.scalatestplus.easymock.EasyMockSugar.niceMock", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#niceMock[T<:AnyRef](implicitclassTag:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "strictMock", "tail" : "(classTag: ClassTag[T]): T", "member" : "org.scalatestplus.easymock.EasyMockSugar.strictMock", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#strictMock[T<:AnyRef](implicitclassTag:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "mock", "tail" : "(classTag: ClassTag[T]): T", "member" : "org.scalatestplus.easymock.EasyMockSugar.mock", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#mock[T<:AnyRef](implicitclassTag:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "lastCall", "tail" : "(): IExpectationSetters[T]", "member" : "org.scalatestplus.easymock.EasyMockSugar.lastCall", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#lastCall[T]:org.easymock.IExpectationSetters[T]", "kind" : "def"}, {"label" : "call", "tail" : "(value: T): IExpectationSetters[T]", "member" : "org.scalatestplus.easymock.EasyMockSugar.call", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#call[T](value:T):org.easymock.IExpectationSetters[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/scalatestplus\/easymock\/EasyMockSugar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Trait that provides some basic syntax sugar for EasyMock."}]};